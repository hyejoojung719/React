### 프로젝트 셋팅
 npx create-react-app todolist --template typescript
 npm i --save-dev @types/styled-components
 npm i styled-components
 npm i react-router-dom@5.3.0
 npm i react-router-dom react-query
 npm i react query
 npm i react helmet
 npm i recoil
 npm i react-hook-form


 ### react-hook-form 사용전..
 회원가입 form을 만든다고 할 때, 
 id, password, email 등등 input element마다 
  const [toDo, setToDo] = useState("");
  const onChange = (event: React.FormEvent<HTMLInputElement>) => {
    const {
      currentTarget: { value },
    } = event;
    setToDo(value);
  };

  const onSubmit = (event: React.FormEvent<HTMLFormElement>) => {
    event.preventDefault();
    console.log(toDo);
  };
  위에 코드를 적어야 함


  ### react-hook-form 사용하기
  1. npm i react-hook-form
  2. register함수를 사용하면 onChange이벤트 헨들러가 필요업어짐~~ props, setState도 필요없어진다!!
  3. watch는 form의 입력값들의 변화를 관찰할 수 있게 함
  4. handleSubmit이 validation 담당 ex) preventDefault
      <form onSubmit={handleSubmit(onValid)}>
      => onSubmit 이벤트 안에 handleSubmit을 호출하고, handleSubmit은 2개의 인자를 받음.
         하나는 데이터가 유효할 때 호출되는 함수(필수), 또 다른 하나는 데이터가 유효하지 않을 떄 호출되는 함수
  5. formState => 에러 체크
  6. formState를 이용한 거 외에 추가적인 에러체크가 필요할 경우
     => setError : 발생하는 문제에 따라 추가적으로 에러를 설정할 수 있게 도와줌
    ex) password랑 apssword1이 같지 않을 경우 에러 발생시키기
     => validate : 함수를 값으로 가지는데 인자로 가짐, 내가 원하는 규칙으로 유효성 검사하기
    ex) nick 포함한 사람 가입 못 하게 하기

  
  ###toDo 카테고리 수정하기
  1. console.log(toDo)
  2. toDo data 생성(5개..)
  3. 3번쨰 toDo 카테고리 수정하기 
    => state mutate하기  
    (1) 수정하고자 하는 toDo 경로 찾기 => targetIndex
    (2) 새 category로 새로운 to do 만들기

  ###Recoil Selector
  - 파생된 state(derived state)의 일부를 나타냄
  - 기존 state를 가져와 새로운 state를 만들어 반환(기존 state 변형 X)
  - ex) todo들을 카테고리별로 분류하기 => toDo를 하나의 atom에 담고 싶지만
        atom의 output을 좀더 잘 써먹을 수 있는 형태로 변환
  - component는 data를 렌더링하기만 하고, 
  atom에 데이터를 모아두고selector을 이용해서 데이터를 변형해서 반환할 수 있다. 


  ###enum
  - toDo 카테고리가 categoryState에 따라서 추가되게 하기
  